#!/usr/bin/env python3
"""
Script ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ FAISS compatibility 
‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î vector store
"""

import os
import sys

def test_faiss_loading():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î FAISS vector store"""
    
    print("üîç Testing FAISS vector store loading...")
    
    try:
        from langchain_community.vectorstores import FAISS
        from langchain_community.embeddings import SentenceTransformerEmbeddings
        print("‚úÖ Successfully imported FAISS and SentenceTransformerEmbeddings")
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        return False
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö embedding
    try:
        print("üî§ Testing embedding model...")
        embeddings = SentenceTransformerEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
        test_embed = embeddings.embed_query("test")
        print(f"‚úÖ Embedding working, dimension: {len(test_embed)}")
    except Exception as e:
        print(f"‚ùå Embedding error: {e}")
        return False
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö FAISS loading
    vector_stores = ["naruto", "snake", "naruto_snake"]
    
    for vs_name in vector_stores:
        vs_path = f"vector store/{vs_name}"
        if os.path.exists(vs_path):
            print(f"\nüìÅ Testing vector store: {vs_name}")
            
            try:
                # ‡∏•‡∏≠‡∏á API ‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô
                try:
                    db = FAISS.load_local(
                        vs_path, 
                        embeddings, 
                        allow_dangerous_deserialization=True
                    )
                    print(f"‚úÖ {vs_name}: Loaded with NEW API (allow_dangerous_deserialization=True)")
                except TypeError:
                    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á API ‡πÄ‡∏Å‡πà‡∏≤
                    db = FAISS.load_local(vs_path, embeddings)
                    print(f"‚úÖ {vs_name}: Loaded with OLD API (no allow_dangerous_deserialization)")
                
                # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö search
                results = db.similarity_search("test query", k=1)
                print(f"   üìñ Found {len(results)} documents")
                
            except Exception as e:
                print(f"‚ùå {vs_name}: Failed to load - {e}")
        else:
            print(f"‚ö†Ô∏è Vector store not found: {vs_path}")
    
    return True

def check_versions():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö version ‡∏Ç‡∏≠‡∏á packages ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á"""
    
    print("\nüìã Checking package versions:")
    
    packages = [
        "langchain",
        "langchain-community", 
        "faiss-cpu",
        "sentence-transformers",
        "streamlit"
    ]
    
    for package in packages:
        try:
            if package == "langchain":
                import langchain
                print(f"   {package}: {langchain.__version__}")
            elif package == "langchain-community":
                import langchain_community
                print(f"   {package}: {langchain_community.__version__}")
            elif package == "faiss-cpu":
                import faiss
                print(f"   {package}: available")
            elif package == "sentence-transformers":
                import sentence_transformers
                print(f"   {package}: {sentence_transformers.__version__}")
            elif package == "streamlit":
                import streamlit
                print(f"   {package}: {streamlit.__version__}")
        except ImportError:
            print(f"   {package}: ‚ùå Not installed")
        except AttributeError:
            print(f"   {package}: ‚úÖ Installed (version unknown)")

def main():
    print("üîß FAISS Compatibility Fixer")
    print("=" * 50)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô project directory
    if not os.path.exists("rag_chatbot.py"):
        print("‚ùå Please run this script from the LLM-RAG project directory")
        return
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö versions
    check_versions()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö FAISS loading
    success = test_faiss_loading()
    
    if success:
        print("\n‚úÖ FAISS compatibility test completed!")
        print("   The rag_functions.py has been updated to handle both old and new FAISS APIs")
    else:
        print("\n‚ùå There are still issues with FAISS loading")
        print("   You may need to update your packages:")
        print("   pip install --upgrade langchain langchain-community faiss-cpu")

if __name__ == "__main__":
    main()
